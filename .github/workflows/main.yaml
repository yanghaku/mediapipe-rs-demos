name: CI
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**/*.md"

env:
  WASMEDGE_PATH: ~/.wasmedge

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Rust wasm32-wasi
        run: rustup target add wasm32-wasi

      - name: Build normal applications
        run: cargo build --release

      - name: Download FFMpeg dependencies
        run: ./scripts/download-ffmpeg-deps.sh

      - name: Build FFMpeg applications (audio-classification-ffmpeg and image-classification-ffmpeg)
        run: |
          bash -c '\
          export WASI_SYSROOT="$(pwd)/ffmpeg-deps/wasi-sysroot"; \
          export FFMPEG_DIR="$(pwd)/ffmpeg-deps/ffmpeg-lib"; \
          export CLANG_RT="$(pwd)/ffmpeg-deps/clang-rt"; \
          export BINDGEN_EXTRA_CLANG_ARGS="--sysroot=${WASI_SYSROOT} --target=wasm32-wasi -fvisibility=default"; \
          env; \
          cargo build --release --manifest-path=./crates/audio/audio-classification-ffmpeg/Cargo.toml;\
          cargo build --release --manifest-path=./crates/vision/image-classification-ffmpeg/Cargo.toml;'

      - name: Build and install WasmEdge Wasi-NN with TensorflowLite backend
        run: |
          bash -c "\
          git clone https://github.com/WasmEdge/WasmEdge;\
          cd ./WasmEdge;\
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorflowLite -DCMAKE_INSTALL_PREFIX=${WASMEDGE_PATH} .;\
          cmake --build build;\
          cmake --install build;\
          cp build/_deps/wasmedgetensorflowdepslite-src/libtensorflowlite_c.so ${WASMEDGE_PATH}/lib/;"

      - name: Run application image-classification.wasm
        run: |
          bash -c "\
          export PATH=${WASMEDGE_PATH}/bin:${PATH}; \
          export WASMEDGE_PLUGIN_PATH=${WASMEDGE_PATH}/lib/wasmedge; \
          export LD_LIBRARY_PATH=${WASMEDGE_PATH}/lib:${LD_LIBRARY_PATH}; \
          curl -sLO https://storage.googleapis.com/mediapipe-tasks/image_classifier/efficientnet_lite0_fp32.tflite;\
          wasmedge --dir .:. ./target/wasm32-wasi/release/image-classification.wasm --help;\
          wasmedge --dir .:. ./target/wasm32-wasi/release/image-classification.wasm \
          -m ./efficientnet_lite0_fp32.tflite -i ./data/img/bird.jpg --max-results 2;\
          wasmedge --dir .:. ./target/wasm32-wasi/release/image-classification.wasm \
          -m ./efficientnet_lite0_fp32.tflite -i ./data/img/banana.jpg;"

      - name: Run application text-classification.wasm
        run: |
          bash -c '\
          export PATH=${WASMEDGE_PATH}/bin:${PATH}; \
          export WASMEDGE_PLUGIN_PATH=${WASMEDGE_PATH}/lib/wasmedge; \
          export LD_LIBRARY_PATH=${WASMEDGE_PATH}/lib:${LD_LIBRARY_PATH}; \
          curl -sLO https://storage.googleapis.com/mediapipe-tasks/text_classifier/bert_text_classifier.tflite;\
          echo "I love coding so much!" | wasmedge --dir .:. ./target/wasm32-wasi/release/text-classification.wasm \
          -m ./bert_text_classifier.tflite;\
          echo "I do not like raining." | wasmedge --dir .:. ./target/wasm32-wasi/release/text-classification.wasm \
          -m ./bert_text_classifier.tflite;'

      - name: Run application gesture-recognition.wasm
        run: |
          bash -c "\
          export PATH=${WASMEDGE_PATH}/bin:${PATH}; \
          export WASMEDGE_PLUGIN_PATH=${WASMEDGE_PATH}/lib/wasmedge; \
          export LD_LIBRARY_PATH=${WASMEDGE_PATH}/lib:${LD_LIBRARY_PATH}; \
          curl -sLO https://storage.googleapis.com/mediapipe-tasks/gesture_recognizer/gesture_recognizer.task;\
          wasmedge --dir .:. ./target/wasm32-wasi/release/gesture-recognition.wasm \
          -m ./gesture_recognizer.task -i data/img/gesture_recognition_google_samples/pointing_up.jpg;\
          wasmedge --dir .:. ./target/wasm32-wasi/release/gesture-recognition.wasm \
          -m ./gesture_recognizer.task -i data/img/gesture_recognition_google_samples/thumbs_up.jpg;\
          wasmedge --dir .:. ./target/wasm32-wasi/release/gesture-recognition.wasm \
          -m ./gesture_recognizer.task -i data/img/gesture_recognition_google_samples/victory.jpg;"

      - name: Run application audio-classification-ffmpeg.wasm
        run: |
          bash -c "\
          export PATH=${WASMEDGE_PATH}/bin:${PATH}; \
          export WASMEDGE_PLUGIN_PATH=${WASMEDGE_PATH}/lib/wasmedge; \
          export LD_LIBRARY_PATH=${WASMEDGE_PATH}/lib:${LD_LIBRARY_PATH}; \
          curl -sLO https://storage.googleapis.com/mediapipe-tasks/audio_classifier/yamnet_audio_classifier_with_metadata.tflite;\
          wasmedge --dir .:. -m ./crates/audio/audio-classification-ffmpeg/target/wasm32-wasi/release/audio-classification-ffmpeg.wasm \
          -m ./yamnet_audio_classifier_with_metadata.tflite -i data/audio/speech_16000_hz_mono.wav;"

      - name: Run application object-detection.wasm
        run: |
          bash -c "\
          export PATH=${WASMEDGE_PATH}/bin:${PATH}; \
          export WASMEDGE_PLUGIN_PATH=${WASMEDGE_PATH}/lib/wasmedge; \
          export LD_LIBRARY_PATH=${WASMEDGE_PATH}/lib:${LD_LIBRARY_PATH}; \
          curl -sLO https://storage.googleapis.com/mediapipe-tasks/object_detector/efficientdet_lite0_uint8.tflite;\
          wasmedge --dir .:. -m ./crates/audio/audio-classification-ffmpeg/target/wasm32-wasi/release/object-detection.wasm \
          -m ./efficientdet_lite0_uint8.tflite -i data/img/cat_and_dog.jpg --max-results 2;"
